dim(dat)
dat[1:2, ]
## 4. manipulations
dat[c(1,5,9383),]
dat[customer_id %in% c("34qvWhUcYOe5") & ategory == "pants"), ]
dat[customer_id %in% c("34qvWhUcYOe5") & category == "pants", ]
dat[c(1:2, 1)]
dat[c(1:2, 1), ]
dat$product_id[c(1:2)]
# j step,
dat[, mean(price)]
dat[, sum(time < "2020-01-08")]
dat[, length(unique(product_id))]
dat[, min(age) >= 18]
# j step,
dat[, mean(c(price, age)]
# j step,
dat[, mean(c(price, age))]
# j step,
dat[, mean(c(age))]
# j step, multiple calculations
dat[, .(mean(price))]
# j step, multiple calculations
dat[, .(mean(price), mean(age))]
dat[, .(sum(time < "2020-01-08"), length(unique(product_id)), min(age) >= 10)
dat[, .(sum(time < "2020-01-08"), length(unique(product_id)), min(age) >= 10)]
dat[, .(sum(time < "2020-01-08"), length(unique(product_id)), min(age) >= 10)]
# j step, multiple calculations, created a data.table
dat[, .(mean_price = mean(price), mean_age = mean(age))]
# combining i and j steps
dat[category == "hat", .(median_price = median(price)))]
# combining i and j steps
dat[category == "hat", .(median_price = median(price))]
rev_summary_NW <- dat[region == "Northeast", .(revenue_NE = sum(price))]
rev_summary_NW
rev_summary <- dat[region == "Northeast", .(revenue_NE = sum(price*quantity))]
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NW / 'total custeomrs, NW']
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / 'total custeomrs, NW']
rev_summary <- dat[region == "Northeast", .(revenue_NE = sum(price*quantity), 'total customers, NE' = length(unique(custoemr_id)))]
rev_summary <- dat[region == "Northeast", .(revenue_NE = sum(price*quantity), 'total customers, NE' = length(unique(customer_id)))]
rev_summary
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / 'total custeomrs, NW']
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / 'total customers, NE']
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / 'total customers, NE']
rev_summary
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / `total customers, NE``]
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / `total customers, NE`]
# add variables :=
rev_summary[, mean_rev_per_customer := revenue_NE / `total customers, NE`]
rev_summary
# add variables in subsets
dat[category == "coat", expensive_coat := (price >= 300)]
dat
dat$expensive_coat
dat[category != "coat", unique(expensive_coat)]
# remove variables
"expensive_coat" %in% names(dat)
dat[, expensive_coat := NULL]
"expensive_coat" %in% names(dat)
print(dt.a)
## 5. Reference
dt.a <- data.table(x = 1:2)
dt.b <- dt.a
print(dt.a)
dt.a[1, x:=5]
print(dt.b)
# grouping
dat[, .(revenue_millions = round(x = sum(quantity * price / (10^6)), digits = 2)), by = "region"]
dat[, .(`Unique Products` = length(unique(product_id))), by = "region"]
dat[, .(`Unique Products` = length(unique(customer_id))), by = c("gender", "region"]
dat[, .(`Unique Products` = length(unique(customer_id))), by = c("gender", "region")]
unique.customer.gender.region <- dat[, .(`Unique Products` = length(unique(customer_id))), by = c("gender", "region")]
unique.customer.gender.region
# sorting
setorderv(x = unique.customer.gender.region, cols = c("gender", "region"), order = c(1, -1))
unique.customer.gender.region
# sorting II: keyby, everything can only be ascending
unique.customer.gender.region <- dat[, .(`Unique Products` = length(unique(customer_id))), keyby = c("gender", "region")]
# sorting II: keyby, everything can only be ascending
dat[, .(`Unique Products` = length(unique(customer_id))), keyby = c("gender", "region")]
# grouping by lists
dat[, .(`Total quantity` = sum(quantity)), by = gender]
dat[, .(`Total quantity` = sum(quantity)), by = list(gender, region)]
dat[gender == "F", .(revenue_millions = round(x = sum(quantity * price) / (10^6), digits = 2)),
keyby = list(category, `Under 40` = age < 40)]
dat[gender == "F", .(revenue_millions = round(x = sum(quantity * price) / (10^6), digits = 2)),
keyby = list(category, `Under 40` = age < 40)]
setwd("/Volumes/GoogleDrive/My Drive/Learning/DS & ML/Workshops/ASA/The Productive Practitioner/Assignments")
# Clear your console's memory to ensure a clean session.
rm(list=ls())
# Load any required libraries here
library(data.table)
# 1:  Read in the data from transactions.csv using data.table's fread command.  Make sure to use relative directories to navigate the file structure.
dat <- fread(input = "../Data/transactions.csv")
# 2a:  What is the unique number of customers per category?
dat[, .(`Unique Customers` = length(unique(customer_id))), by = "category"]
# 2b:  Does your table from 2a add up to the overall number of unique customers?  Why or why not?
dat[, .(`Unique Customers` = length(unique(customer_id)))]
# 2a:  What is the unique number of customers per category?
unique.customers.region <- dat[, .(`Unique Customers` = length(unique(customer_id))), by = "category"]
unique.customers.region
# 2b:  Does your table from 2a add up to the overall number of unique customers?  Why or why not?
dat[, .(`Unique Customers` = length(unique(customer_id)))]
unique.customers.region[, sum(`Unique Customers`)]
unique.customers.category
# 2a:  What is the unique number of customers per category?
unique.customers.category <- dat[, .(`Unique Customers` = length(unique(customer_id))), by = "category"]
unique.customers.category
# 2b:  Does your table from 2a add up to the overall number of unique customers?  Why or why not?
dat[, .(`Unique Customers` = length(unique(customer_id)))]
unique.customers.category[, sum(`Unique Customers`)]
names(dat)
# 3a:  Create a revenue variable.  For the whole time period of the data, what is the average revenue per customer among customers at least 35 years old?
dat[, .(revenue_millions = round(x = sum(quantity * price / (10^6)), digits = 2)), by = "customer_id"]
# 3a:  Create a revenue variable.  For the whole time period of the data, what is the average revenue per customer among customers at least 35 years old?
dat[, .(revenue = sum(quantity * price)), by = "customer_id"]
# 3a:  Create a revenue variable.  For the whole time period of the data, what is the average revenue per customer among customers at least 35 years old?
dat[age >= 35, .(revenue = sum(quantity * price)), by = "customer_id"]
# 3a:  Create a revenue variable.  For the whole time period of the data, what is the average revenue per customer among customers at least 35 years old?
revenue.customers.35 <- dat[age >= 35, .(revenue = sum(quantity * price)), by = "customer_id"]
revenue.customers.35[, average(revenue)]
revenue.customers.35[, avg(revenue)]
revenue.customers.35[, mean(revenue)]
## 6. .N operator
# within the i or j step, .N refers to the number of rows
# primary way to count records
dat[.N, ]
dat[.N - 5, ]
dat[.N - 5:.N, ]
dat[.N - 5, ]
dat[min(100, .N)]
dat[100:105, ]
dat[100:.N, ]
dat[(.N - 5):.N, ]
# in the j step
dat[, .N]
# in the i step
dat[.N, ] # go to the last row
dat[region == "Midwest", .N]
dat[age >= 50 & gender == "F", .(`Total Revenue, Millions` = round(x = sum(quantity * price)/10^6, digits = 2), `Number of Transactions` = .N,
`Mean Revenue Per Transaction` = round(x = mean(quantity * price), digits = 2))]
# with grouping
dat[, .N, region]
product.transaction.totals <- dat[, .N, by = product_id]
product.transaction.totals[, min(N)]
product.transaction.totals[, min(N)] # minimum number of transactions
# 3b:  Now we want to restrict attention to customers who a) are at least 35 years old, and b) who had at least three transactions during the period.  For this group, what is the average revenue per customer?
dat[, .(`Number of transactions` = .N), by = "customer_id"]
# 3b:  Now we want to restrict attention to customers who a) are at least 35 years old, and b) who had at least three transactions during the period.  For this group, what is the average revenue per customer?
number.transactions.customer = dat[, .(`Number of transactions` = .N), by = "customer_id"]
number.transactions.customer[`Number of transactions` >=3, ]
number.transactions.customer[`Number of transactions` >=3, customer_id]
customers.at.least <- number.transactions.customer[`Number of transactions` >=3, customer_id]
customers.at.least3.transactions <- number.transactions.customer[`Number of transactions` >=3, customer_id]
customers.at.least3.transactions
dat[customer_id %in% customers.at.least3.transactions, ]
dat[customer_id %in% customers.at.least3.transactions & age >= 35,
.(revenue = sum(quantity * price)), by = "customer_id"]
revenue.customers.35.3
revenue.customers.35.3 <- dat[customer_id %in% customers.at.least3.transactions & age >= 35,
.(revenue = sum(quantity * price)), by = "customer_id"]
revenue.customers.35.3[, mean(revenue)]
# 4a:  Make a Top 10 list of the total quantity products sold.  Show a table with the sorted results.
product.qty.sold <- dat[, .(`Number quantity sold` = sum(quantity)), by = product_id]
product.qty.sold
setorderv(x = product.qty.sold, cols = c("Number quantity sold"), order = c(-1))
product.qty.sold
head(product.qty.sold)
head(product.qty.sold, 10)
# 4b:  Make a Top 10 list of the products that generated the most revenue.  Show a table with the sorted results.
product.revenue.sold <- dat[, .(`Total revenue sold` = sum(quantity * price)), by = product_id]
setorderv(x = product.revenue.sold, cols = c("Total revenue sold"), order = c(-1))
head(product.revenue.sold, 10)
## 7. .SD operator
dat[1:2, .SD]
dat[1:2, .SD, .SDcols = 3:$]
dat[1:2, .SD, .SDcols = 3:4]
dat[1:2, .SD, .SDcols = c("price", "quantity")]
dat
# 5:  Among female shoppers in the Midwest with an income at least 50000, calculate the median revenue per customer while grouping by category.
dat[gender = "F" & region = "Midwest" & income > 50000, .(`Median revenue` = median(price * quantity)), by = c("category", "customer")]
# 5:  Among female shoppers in the Midwest with an income at least 50000, calculate the median revenue per customer while grouping by category.
dat[gender == "F" & region == "Midwest" & income > 50000, .(`Median revenue` = median(price * quantity)), by = c("category", "customer")]
# 5:  Among female shoppers in the Midwest with an income at least 50000, calculate the median revenue per customer while grouping by category.
dat[gender == "F" & region == "Midwest" & income > 50000, .(`Median revenue` = median(price * quantity)), by = c("category", "customer_id")]
# with grouped computations
# get first transaction for every one
setorderv(x = dat, cols = c("customer_id", "time"), order = 1)
first.transactions <- dat[, .SD[1], by = customer_id]
first.transactions[, .(mean_revenue = mean(quantity * price))]
first.transactions <- dat[1, , by = customer_id]
first.transactions <- dat[1, :, by = customer_id]
first.transactions[, .(mean_revenue = mean(quantity * price))]
ft[, mean(revenue)]
# other
ft <- dat[, .(revenue = quantity[1] * price[1]), by = customer_id]
ft[, mean(revenue)]
first.transactions <- dat[1, .SD[1], by = customer_id]
first.transactions[, .(mean_revenue = mean(quantity * price))]
# with grouped computations
# get first transaction for every one
setorderv(x = dat, cols = c("customer_id", "time"), order = 1)
first.transactions <- dat[, .SD[1], by = customer_id]
first.transactions[, .(mean_revenue = mean(quantity * price))]
## as an input to a function
missingness.tab <- dat[, .(num_missing = rowSums(x = is.na(x = .SD)))]
missingness.tab[1:3, ]
# fitting a linear regression in the j step
rev.mod <- dat[category == "coat",
lm(formula = price * quantity ~ age + gender + income + region, data = .SD)]
round(x = summary(rev.mod)$coefficients, digits = 3)
rev.mod
# fitting a linear regression in the j step
rev.mod <- dat[category == "coat",
lm(formula = price * quantity ~ age + gender + income + region, data = .SD)]
# combine with lapply and .SD
# you can perform a calculation across multiple variables
dat[, lapply(X = .SD, FUN = "mean"), .SDcols = c("price", "quantity", "age", "income")]
dat[, lapply(X = .SD, FUN = "mean")]
dat[, lapply(X = .SD, FUN = "mean"), :]
# combine with lapply and .SD
# you can perform a calculation across multiple variables
dat[, lapply(X = .SD, FUN = "mean"), .SDcols = c("price", "quantity", "age", "income")]
dat[, .(price = mean(price), quantity = mean(quantity), age = mean(age), income = mean(income))]
variables.sdcols <- c("price", "quantity", "age", "income")
dat[, .(variable = variables.sdcols, mean = lapply(X = .SD, FUN = "mean"), sd = lapply(X = .SD, FUN = "sd")), .SDcols = variables.sdcols]
# search for patterns in names in .SDcols
dat[1:3, .SD, .SDcols = patterns("pr|tim|qu")]
## example
dat[region == "Northeast",
lapply(X = .SD, FUN = "mean"), .SDcols = c("price, quantity"),
keyby = list(gender, under_50 = (age < 50))]
## example
dat[region == "Northeast",
lapply(X = .SD, FUN = "mean"), .SDcols = c("price", "quantity"),
keyby = list(gender, under_50 = (age < 50))]
## 7. Reshaping
dat[, .N, by = customer_id][, .(max_transactions = max(N))]
# Clear your console's memory to ensure a clean session.
rm(list=ls())
# Load any required libraries here
library(data.table)
# Load the data
dat <- fread(input = "../Data/transactions.csv")
names(dat)
# 1a:  How many total transactions were there for each gender and category?
dat[, .(`Number of transactions` = length(quantity)), by = c("gender", "catgory")]
# 1a:  How many total transactions were there for each gender and category?
dat[, .(`Number of transactions` = length(quantity)), by = c("gender", "category")]
# 1b:  How many total transactions were there for each gender and age split (under 40 and at least 40)?
dat[, .(`Number of transactions` = length(quantity)), keyby = list(gender, under_40 = (age < 40)]
# 1b:  How many total transactions were there for each gender and age split (under 40 and at least 40)?
dat[, .(`Number of transactions` = length(quantity)), keyby = list(gender, under_40 = (age < 40))]
# 1a:  How many total transactions were there for each gender and category?
dat[, .(`Number of transactions` = length(quantity)), by = c("gender", "category")]
# 1b:  How many total transactions were there for each gender and age split (under 40 and at least 40)?
dat[, .(`Number of transactions` = length(quantity)), keyby = list(gender, under_40 = (age < 40))]
names(dat)
dat
# 2a: For products purchased before 2020-02-01 by customers under the age of 40, show the 90th percentile of price, quantity, and revenue separately for each gender.
dat[time < '2020-02-01', ]
# 2a: For products purchased before 2020-02-01 by customers under the age of 40, show the 90th percentile of price, quantity, and revenue separately for each gender.
dat[time < '2020-02-01' & age < 40, ]
# 2a: For products purchased before 2020-02-01 by customers under the age of 40, show the 90th percentile of price, quantity, and revenue separately for each gender.
dat[, revenue := price * quantity]
dat
dat[time < '2020-02-01' & age < 40, lapply(X = .SD, FUN = "mean"), .SDcols = c("price", "quantity", "revenue")]
dat[time < '2020-02-01' & age < 40,
lapply(X = .SD, FUN = "mean"),
.SDcols = c("price", "quantity", "revenue"),
by = "gender"]
dat[time < '2020-02-01' & age < 40,
lapply(X = .SD, FUN = "quantile", p=0.9),
.SDcols = c("price", "quantity", "revenue"),
by = "gender"]
dat[gender == "M" & income < 75000,
.(variable = variables.sdcols, mean = lapply(X = .SD, FUN = "mean"), sd = lapply(X = .SD, FUN = "sd")),
.SDcols = variables.sdcols,
by = "region"]
# 2b:  Among male customers with an income less than 75000, calculate the mean, standard deviation, and total transactions for the variables of price, quantity, and revenue while grouping by region.
variables.sdcols <- c("price", "quantity", "revenue")
dat[gender == "M" & income < 75000,
.(variable = variables.sdcols, mean = lapply(X = .SD, FUN = "mean"), sd = lapply(X = .SD, FUN = "sd")),
.SDcols = variables.sdcols,
by = "region"]
install.packages("formulaic")
knitr::opts_chunk$set(echo = TRUE)
# Q5c
pt(-abs(2.315), df=7-1)  # find probabilty of  the t-test
# find probabilty of  the t-test for part b)
2*pt(-abs(2.315), df=7-1)
# find probabilty of  the t-test for part a)
1 - pt(2.315, df=7-1)
# find probabilty of  the t-test for part a)
1 - pt(2.315, df=7-1)
# find probabilty of  the t-test for part b)
2*(1 - pt(2.315, df=7-1)  )
# find probabilty of  the t-test for part a)
1 - pt(-1.888, df=64-1)
# find probabilty of  the t-test for part a)
pt(-1.888, df=64-1)
# find probabilty of  the t-test for part b)
2*(pt(-1.888, df=64-1))
knitr::opts_chunk$set(echo = FALSE)
library(readr)
library(readr)
library(dplyr)
# Set working directory x
setwd("/Users/lingchm/Deskptop")
library(ggplot2)
data <- read.csv('ramen.csv', header=TRUE, sep = ",")
data
data <- read.csv('ramen.csv', header=TRUE)
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
summary(fit)
library("FrF2")
install.packages("FrF2")
library(FrF2)
install.packages("gmp")
data
interaction.plot(data$sweetness, data$sourness, data$spiciness)
interaction.plot(data$sweetness, data$sourness, data$spiciness, type="l",
xlab="sweetness", trace.label="sourness", ylab="spiciness")
interaction.plot(data$sweetness, data$sourness, data$spiciness, type="l",
xlab="sweetness", trace.label="temperature", ylab="spiciness")
2*confint.lm(fit)
data <- read.csv('ramen.csv', header=TRUE)
data
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
summary(fit)
data <- read.csv('ramen.csv', header=TRUE)
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
summary(fit)
data <- read.csv('ramen.csv', header=TRUE)
data
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
summary(fit)
data <- read.csv('ramen.csv', header=TRUE)
data
library(FrF2)
install.packages("DoE.base")
library(FrF2)
library(DoE.base)
install.packages("gmp")
```
help(install.packages)
install.packages("gmp", method="binary")
install.packages("gmp", method="binary")
install.packages("gmp", type="binary")
library(FrF2)
data <- read.csv('ramen.csv', header=TRUE)
data$sweetness <- as.factor(data$sweetness)
data$sourness <- as.factor(data$sourness)
data$temperature <- as.factor(data$temperature)
data$block <- as.factor(data$block)
data
data
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
summary(fit)
anova(fit)
anova(fit)
cubePlot(fit,"sweetness","sourness","temperature",main="cube plot for spiciness")
fit
data <- read.csv('ramen.csv', header=TRUE)
data$sweetness <- as.factor(data$sweetness)
data$sourness <- as.factor(data$sourness)
data$temperature <- as.factor(data$temperature)
data$block <- as.factor(data$block)
data
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
anova(fit)
cubePlot(fit,"sweetness","sourness","temperature",main="cube plot for spiciness")
```{r}
2*confint.lm(fit)
round(summary(fit)$coefficients,2)
knitr::opts_chunk$set(echo = FALSE)
library(readr)
library(dplyr)
library(ggplot2)
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
anova(fit)
data <- read.csv('ramen.csv', header=TRUE)
data$sweetness <- as.factor(data$sweetness)
data$sourness <- as.factor(data$sourness)
data$temperature <- as.factor(data$temperature)
data
fit <- lm(spiciness~sweetness*sourness*temperature + block, data=data)
anova(fit)
2*confint.lm(fit)
interaction.plot(data$sweetness, data$sourness, data$spiciness, type="l",
xlab="sweetness", trace.label="sourness", ylab="spiciness")
interaction.plot(data$sweetness, data$sourness, data$spiciness, type="l",
xlab="sweetness", trace.label="temperature", ylab="spiciness")
interaction.plot(data$sweetness, data$temperature, data$spiciness, type="l",
xlab="sweetness", trace.label="temperature", ylab="spiciness")
interaction.plot(data$sweetness, data$temperature, data$spiciness, type="l",
xlab="sourness", trace.label="temperature", ylab="spiciness")
interaction.plot(data$sourness, data$temperature, data$spiciness, type="l",
xlab="sweetness", trace.label="temperature", ylab="spiciness")
interaction.plot(data$sourness, data$temperature, data$spiciness, type="l",
xlab="sourness", trace.label="temperature", ylab="spiciness")
interaction.plot(data$sweetness, data$temperature, data$spiciness, type="l",
xlab="sweetness", trace.label="temperature", ylab="spiciness")
help(confint.lm)
2*confint.lm(fit, "wt"))
2*confint.lm(fit, "wt")
2*confint.lm(fit)
round(summary(fit)$coefficients,2)
round(summary(fit)$coefficients,2)
round(2*summary(fit)$coefficients,2)
devtools::install_github("irinagain/SLIDE")
devtools::install_github("irinagain/SLIDE", type="binary")
devtools::install_github("irinagain/SLIDE")
devtools::install_github("irinagain/SLIDE", type="binary")
install_github('andreacirilloac/updateR')
devtools::install_github('andreacirilloac/updateR')
library(updateR)
install.packages("rland")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(updateR)
updater()
updateR()
devtools::install_github("irinagain/SLIDE")
devtools::install_github("irinagain/SLIDE", type="binary")
install.packages("rlang")
devtools::install_github("lockEF/r.jive")
devtools::install_github("lockEF/r.jive", force=TRUE)
library(JACA)
# Example
set.seed(1)
# Generate class indicator matrix Z
n = 100
Z=matrix(c(rep(1, n),rep(0, 2 * n)), byrow = FALSE, nrow = n)
for(i in 1:n){
Z[i, ] = sample(Z[i, ])
}
# Generate input data X_list
d = 2
X_list = sapply(1:d, function(i) list(matrix(rnorm(n * 20), n, 20)))
# Train JACA model
W = jacaTrain(Z, X_list, lambda = rep(0.05, 2), verbose = FALSE, alpha= 0.5, rho = 0.2)
# Show the number of non-zero rows of each matrix of discriminant vectors
sapply(W, function(x) sum(rowSums(x) != 0))
# Test semi supervised learning
# Set certain class labels and subsets of views as missing
Z[90:100, ] = rep(NA, 3)
X_list[[1]][1:10, ] = NA
X_list[[2]][11:20, ] = NA
W = jacaTrain(Z, X_list, kmax = 200, eps = 1e-06, lambda = rep(0.05, 2),alpha = 0.5, rho = 0.2, missing = TRUE)
# Show the number of non-zero rows of each matrix of discriminant vectors
sapply(W, function(x) sum(rowSums(x) != 0))
W
install.packages(c('Rcpp', 'RcppArmadillo'))
devtools::install_github("irinagain/SLIDE")
library(SLIDE)
# install.packages("devtools")
# devtools::install_github("debruine/shinyintro")
library(shiny)
library(readr)
library(dplyr)
library(ggplot2)
library(usmap)
#library(knitr)
library(ggsci)
library(data.table)
library(DT)
install.packages("data.table")
install.packages("data.table", type="binary")
install.packages("DT", type="binary")
install.packages("DT", type = "binary")
#library(DT)
library(stringr)
########### SETUP ###########
#setwd("/Users/lingchm/Documents/Github/us_sodium_policies/RShiny")
table_master <- as.data.frame(fread("data/central_database_cleaned_20220824.csv"))
#library(DT)
library(stringr)
library(dplyr)
library(ggplot2)
library(usmap)
#library(knitr)
library(ggsci)
library(data.table)
#library(DT)
library(stringr)
########### SETUP ###########
#setwd("/Users/lingchm/Documents/Github/us_sodium_policies/RShiny")
table_master <- as.data.frame(fread("data/central_database_cleaned_20220824.csv"))
runApp('Documents/Github/us_sodium_policies/Rshiny')
install.packages("shinydashboard")
install.packages("shinywIGETS")
install.packages("shinyWidgets")
runApp('Documents/Github/us_sodium_policies/Rshiny')
runApp('Documents/Github/us_sodium_policies/Rshiny')
runApp('Documents/Github/us_sodium_policies/Rshiny')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools", type="binary")
runApp('Documents/Github/us_sodium_policies/Rshiny')
runApp('Documents/Github/us_sodium_policies/Rshiny')
runApp('Documents/Github/us_sodium_policies/Rshiny')
